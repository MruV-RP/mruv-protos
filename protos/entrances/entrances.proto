syntax = "proto3";

package mruv.entrances;

option go_package = "github.com/MruV-RP/mruv-pb-go/entrances";

import "google/api/annotations.proto"; //from https://github.com/googleapis/googleapis

// The MruV entrances service provides procedures for managing an entrances to estates and teleportation to locations.
service MruVEntrancesService {
    // Create an entrance to building or teleport to location.
    rpc CreateEntrance(CreateEntranceRequest) returns (CreateEntranceResponse) {
        option (google.api.http) = {
            post: "/v1/entrances"
        };
    }

    // Get an entrance to building or a teleport to location.
    rpc GetEntrance(GetEntranceRequest) returns (GetEntranceResponse) {
        option (google.api.http) = {
            get: "/v1/entrances/{id}"
        };
    }

    // Update an entrance to building or a teleport to location.
    rpc UpdateEntrance(UpdateEntranceRequest) returns (UpdateEntranceResponse) {
        option (google.api.http) = {
            patch: "/v1/entrances/{id}"
        };
    }

    // Delete an entrance to building or a teleport to location.
    rpc DeleteEntrance(DeleteEntranceRequest) returns (DeleteEntranceResponse) {
        option (google.api.http) = {
            delete: "/v1/entrances/{id}"
        };
    }

    // Lock entrance.
    rpc Lock(LockRequest) returns (LockResponse) {
        option (google.api.http) = {
            post: "/v1/entrances/{id}/lock"
        };
    }
    
    // Unload entrance.
    rpc Unlock(UnlockRequest) returns (UnlockResponse) {
        option (google.api.http) = {
            post: "/v1/entrances/{id}/unlock"
        };
    }
    
    // Find gate that is closest to a specific position.
    rpc FindNearestEntrance(FindNearestEntranceRequest) returns (FindNearestEntranceResponse) {
        option (google.api.http) = {
            get: "/v1/entrances/nearest"
        };
    }

    // Enter an entrance
    rpc Enter(EnterRequest) returns (EnterResponse) {
        option (google.api.http) = {
            post: "/v1/entrances/{id}/enter"
        };
    }
}

message Entrance {
    uint32 id = 1;
    uint32 estate_id = 2;

    message EntranceDoor {
        string name = 1;
        string message = 2;
        int32 icon = 3;
        int32 marker = 4;
        float x = 5;
        float y = 6;
        float z = 7;
        int32 vw = 8;
        int32 int = 9;
        uint32 estate_id = 10;
    }

    EntranceDoor out = 3;
    EntranceDoor in = 4;
}



// Request message for rpc `CreateEntrance`.
message CreateEntranceRequest {
    Entrance entrance = 1;
}
// Response message for rpc `CreateEntrance`.
message CreateEntranceResponse {
    uint32 id = 1;
}

// Request message for rpc `GetEntrance`.
message GetEntranceRequest {
    uint32 id = 1;
}
// Response message for rpc `GetEntrance`.
message GetEntranceResponse {

}

// Request message for rpc `UpdateEntrance`.
message UpdateEntranceRequest {
    uint32 id = 1;
}
// Response message for rpc `UpdateEntrance`.
message UpdateEntranceResponse {

}

// Request message for rpc `DeleteEntrance`.
message DeleteEntranceRequest {
    uint32 id = 1;
}
// Response message for rpc `DeleteEntrance`.
message DeleteEntranceResponse {

}

// Request message for rpc `Lock`.
message LockRequest {
    uint32 id = 1;

}
// Response message for rpc `Lock`.
message LockResponse {

}

// Request message for rpc `Unlock`.
message UnlockRequest {
    uint32 id = 1;

}
// Response message for rpc `Unlock`.
message UnlockResponse {

}

// Request message for rpc `FindNearestEntrance`.
message FindNearestEntranceRequest {
    float x = 1;
    float y = 2;
    float z = 3;

    float max_distance = 4;
}
// Response message for rpc `FindNearestEntrance`.
message FindNearestEntranceResponse {
    uint32 id = 1;
    float distance = 2;
}

// Request message for rpc `Enter`.
message EnterRequest {
    uint32 id = 1;
}
// Response message for rpc `Enter`.
message EnterResponse {

}