syntax = "proto3";

package mruv;

option go_package = "github.com/MruV-RP/mruv-pb-go/groups";

import "google/api/annotations.proto"; //from https://github.com/googleapis/googleapis
import "common/health.proto";

// The MruV groups service provides procedures for managing groups.
service MruVGroupsService {
    // Create a group.
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
        option (google.api.http) = {
            post: "/v1/groups"
        };
    }

    // Get a  group.
    rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
        option (google.api.http) = {
            get: "/v1/groups/{group_id}"
        };
    }

    // Update a group.
    rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
        option (google.api.http) = {
            patch: "/v1/groups/{group_id}"
        };
    }

    // Delete a group.
    rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
        option (google.api.http) = {
            delete: "/v1/groups/{group_id}"
        };
    }

    // Get all groups.
    rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse) {
        option (google.api.http) = {
            get: "/v1/groups"
        };
    }

    // Assign an owner. Group can have only one owner. Owner can be a player, a group or an account.
    rpc AssignOwner(AssignOwnerRequest) returns (AssignOwnerResponse) {
        option (google.api.http) = {
            put: "/v1/groups/{group_id}/owner"
        };
    }

    // Get group owner.
    rpc GetOwner(GetOwnerRequest) returns (GetOwnerResponse) {
        option (google.api.http) = {
            get: "/v1/groups/{group_id}/owner"
        };
    }


    // Add a group member.
    rpc AddMember(AddMemberRequest) returns (AddMemberResponse) {
        option (google.api.http) = {
            post: "/v1/groups/{group_id}/members/{member_id}"
        };
    }

    // Get a group member.
    rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {
        option (google.api.http) = {
            get: "/v1/groups/{group_id}/members"
        };
    }

    // Remove a group member.
    rpc RemoveMember(RemoveMemberRequest) returns (RemoveMemberResponse) {
        option (google.api.http) = {
            delete: "/v1/groups/{group_id}/members/{member_id}"
        };
    }

    // Add a permission to a group.
    rpc AddPermission(AddPermissionRequest) returns (AddPermissionResponse) {
        option (google.api.http) = {
            post: "/v1/groups/{group_id}/permissions"
        };
    }

    // Get all group permissions.
    rpc GetPermissions(GetPermissionsRequest) returns (GetPermissionsResponse) {
        option (google.api.http) = {
            get: "/v1/groups/{group_id}/permissions"
        };
    }

    // Remove group permission.
    rpc RemovePermission(RemovePermissionRequest) returns (RemovePermissionResponse) {
        option (google.api.http) = {
            delete: "/v1/groups/{group_id}/permissions"
        };
    }
    
    // Add a subgroup to a group.
    rpc AddSubgroup(AddSubgroupRequest) returns (AddSubgroupResponse) {
        option (google.api.http) = {
            post: "/v1/groups/{group_id}/subgroups/{subgroup_id}"
        };
    }
    
    // Get all subgroups.
    rpc GetSubgroups(GetSubgroupsRequest) returns (GetSubgroupsResponse) {
        option (google.api.http) = {
            get: "/v1/groups/{group_id}/subgroups"
        };
    }
    
    // Remove a subgroup from group.
    rpc RemoveSubgroup(RemoveSubgroupRequest) returns (RemoveSubgroupResponse) {
        option (google.api.http) = {
            delete: "/v1/groups/{group_id}/subgroups/{subgroup_id}"
        };
    }

    // Check is member of a group is permitted to do specific action.
    rpc IsPermitted(IsPermittedRequest) returns (IsPermittedResponse) {
        option (google.api.http) = {
            get: "/v1/groups/members/{id}/permitted"
        };
    }

    //Service status
    rpc GetServiceStatus (ServiceStatusRequest) returns (ServiceStatusResponse) {
        option (google.api.http) = {
            get: "/v1/groups/status"
        };
    }
    rpc GetServiceVersion (VersionRequest) returns (VersionResponse) {
        option (google.api.http) = {
            get: "/v1/groups/version"
        };
    }
}

// Owner types.
enum OwnerType {
    OWNER_TYPE_UNKNOWN = 0;
    OWNER_TYPE_ACCOUNT = 1;
    OWNER_TYPE_CHARACTER = 2;
    OWNER_TYPE_GROUP = 3;
}

// Member type.
enum MemberType {
    MEMBER_TYPE_UNKNOWN = 0;
    MEMBER_TYPE_ACCOUNT = 1;
    MEMBER_TYPE_CHARACTER = 2;
}

// Request message for rpc `CreateGroup`.
message CreateGroupRequest {
    string name = 1;
}
// Response message for rpc `CreateGroup`.
message CreateGroupResponse {
    uint32 group_id = 1;
}

// Request message for rpc `GetGroup`.
message GetGroupRequest {
    uint32 group_id = 1;
}
// Response message for rpc `GetGroup`.
message GetGroupResponse {
    string name = 1;
}

// Request message for rpc `UpdateGroup`.
message UpdateGroupRequest {
    uint32 group_id = 1;
    string name = 2;
}
// Response message for rpc `UpdateGroup`.
message UpdateGroupResponse {
    
}

// Request message for rpc `DeleteGroup`.
message DeleteGroupRequest {
    uint32 group_id = 1;
}
// Response message for rpc `DeleteGroup`.
message DeleteGroupResponse {
    
}

// Request message for rpc `GetGroups`.
message GetGroupsRequest {

}
// Response message for rpc `GetGroups`.
message GetGroupsResponse {
    repeated GetGroupResponse groups = 1;
}

// Request message for rpc `AssignOwner`.
message AssignOwnerRequest {
    uint32 group_id = 1;
    OwnerType owner_type = 3;
    uint32 owner_id = 2;
}
// Response message for rpc `AssignOwner`.
message AssignOwnerResponse {
    
}

// Request message for rpc `GetOwner`.
message GetOwnerRequest {
    uint32 group_id = 1;
}
// Response message for rpc `GetOwner`.
message GetOwnerResponse {
    uint32 owner_id = 1;
    OwnerType owner_type = 2;
}

// Request message for rpc `AddMember`.
message AddMemberRequest {
    uint32 group_id = 1;
    uint32 member_id = 2;
}
// Response message for rpc `AddMember`.
message AddMemberResponse {
}

// Request message for rpc `GetMembers`.
message GetMembersRequest {
    uint32 group_id = 1;
}
// Response message for rpc `GetMembers`.
message GetMembersResponse {
    MemberType member_type = 1;
    repeated uint32 member_ids = 2;
}

// Request message for rpc `RemoveMember`.
message RemoveMemberRequest {
    uint32 group_id = 1;
    uint32 member_id = 2;
}
// Response message for rpc `RemoveMember`.
message RemoveMemberResponse {

}

// Request message for rpc `AddPermission`.
message AddPermissionRequest {
    uint32 group_id = 1;
    string name = 2;
    string definition = 3;
}
// Response message for rpc `AddPermission`.
message AddPermissionResponse {
    uint32 permission_id = 1;
}

// Request message for rpc `GetPermissions`.
message GetPermissionsRequest {
    uint32 group_id = 1;
}
// Response message for rpc `GetPermissions`.
message GetPermissionsResponse {
    message Permission {
        uint32 id = 1;
        string name = 2;
        string definition = 3;
    }

    repeated Permission permissions = 1;
}

// Request message for rpc `RemovePermission`.
message RemovePermissionRequest {
    uint32 group_id = 1;
    uint32 permission_id = 2;
}
// Response message for rpc `RemovePermission`.
message RemovePermissionResponse {

}

// Request message for rpc `AddSubgroup`.
message AddSubgroupRequest {
    uint32 group_id = 1;
    uint32 subgroup_id = 2;
}
// Response message for rpc `AddSubgroup`.
message AddSubgroupResponse {

}

// Request message for rpc `GetSubgroups`.
message GetSubgroupsRequest {
    uint32 group_id = 1;
}
// Response message for rpc `GetSubgroups`.
message GetSubgroupsResponse {
    repeated uint32 subgroup_ids = 1;
}

// Request message for rpc `RemoveSubgroup`.
message RemoveSubgroupRequest {
    uint32 group_id = 1;
    uint32 subgroup_id = 2;
}
// Response message for rpc `RemoveSubgroup`.
message RemoveSubgroupResponse {

}

// Request message for rpc `IsPermitted`.
message IsPermittedRequest {
    uint32 member_id = 1;
    MemberType member_type = 2;
    string action = 3;
}
// Response message for rpc `IsPermitted`.
message IsPermittedResponse {
    bool permitted = 1;
}

