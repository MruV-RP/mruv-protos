syntax = "proto3";

package mruv.gates;

option go_package = "github.com/MruV-RP/mruv-pb-go/gates";

import "google/api/annotations.proto"; //from https://github.com/googleapis/googleapis
import "objects/movable.proto";
import "spots/spots.proto";

// The MruV gates service provides procedures for managing gates and moving objects groups.
service MruVGatesService {
    // Create a gate or a moving objects objects group.
    rpc CreateGate(CreateGateRequest) returns (CreateGateResponse) {
        option (google.api.http) = {
            post: "/v1/gates"
            body: "*"
        };
    }

    // Get a gate or a moving objects objects group.
    rpc GetGate(GetGateRequest) returns (GetGateResponse) {
        option (google.api.http) = {
            get: "/v1/gates/{id}"
        };
    }

    // Update a gate or a moving objects objects group.
    rpc UpdateGate(UpdateGateRequest) returns (UpdateGateResponse) {
        option (google.api.http) = {
            patch: "/v1/gates/{id}"
            body: "*"
        };
    }

    // Delete a gate or a moving objects objects group.
    rpc DeleteGate(DeleteGateRequest) returns (DeleteGateResponse) {
        option (google.api.http) = {
            delete: "/v1/gates/{id}"
        };
    }

    // Lock a gate. Locked gate cannot be opened.
    rpc Lock(LockRequest) returns (LockResponse) {
        option (google.api.http) = {
            post: "/v1/gates/{id}/lock"
            body: "*"
        };
    }

    // Unload a gate, so it can be open.
    rpc Unlock(UnlockRequest) returns (UnlockResponse) {
        option (google.api.http) = {
            post: "/v1/gates/{id}/unlock"
            body: "*"
        };
    }

    // Opens a gate.
    rpc Open(OpenRequest) returns (OpenResponse) {
        option (google.api.http) = {
            post: "/v1/gates/{id}/open"
            body: "*"
        };
    }

    // Close a gate.
    rpc Close(CloseRequest) returns (CloseResponse) {
        option (google.api.http) = {
            post: "/v1/gates/{id}/close"
            body: "*"
        };
    }

    // Find gate that is closest to a specific position.
    rpc FindNearestGate(FindNearestGateRequest) returns (FindNearestGateResponse) {
        option (google.api.http) = {
            get: "/v1/gates/nearest"
        };
    }

    //
    rpc FetchAll(FetchAllGatesRequest) returns (stream FetchAllGatesResponse) {}
}

message Gate {
    string name = 1;
    repeated objects.MovableObject gate_objects = 2;
    spots.Spot spot = 3;
    bool opened = 4;
    bool locked = 5;
}

// Request message for rpc `CreateGate`.
message CreateGateRequest {
    string name = 1;
    // List of objects to move on gate close/open. Every object should have only 2 states: opened, closed.
    repeated objects.MovableObject gate_objects = 2;
    // Gate spot. This spot define gate position.
    spots.Spot spot = 3;
}
// Response message for rpc `CreateGate`.
message CreateGateResponse {
    uint32 id = 1;
}

// Request message for rpc `GetGate`.
message GetGateRequest {
    uint32 id = 1;

}
// Response message for rpc `GetGate`.
message GetGateResponse {
    string name = 1;
    // List of objects to move on gate close/open. Every object should have only 2 states: opened, closed.
    repeated objects.MovableObject movable_objects = 2;
    spots.Spot spot = 3;
    bool opened = 4;
    bool locked = 5;
}

// Request message for rpc `UpdateGate`.
message UpdateGateRequest {
    uint32 id = 1;
    string name = 2;
    uint32 spot_id = 3;
    repeated uint32 gate_movable_objects = 4;
}
// Response message for rpc `UpdateGate`.
message UpdateGateResponse {

}

// Request message for rpc `DeleteGate`.
message DeleteGateRequest {
    uint32 id = 1;
}
// Response message for rpc `DeleteGate`.
message DeleteGateResponse {

}

// Request message for rpc `Lock`.
message LockRequest {
    uint32 id = 1;
}
// Response message for rpc `Lock`.
message LockResponse {

}

// Request message for rpc `Unlock`.
message UnlockRequest {
    uint32 id = 1;

}
// Response message for rpc `Unlock`.
message UnlockResponse {

}

// Request message for rpc `Open`.
message OpenRequest {
    uint32 id = 1;
}
// Response message for rpc `Open`.
message OpenResponse {

}

// Request message for rpc `Close`.
message CloseRequest {
    uint32 id = 1;
}
// Response message for rpc `Close`.
message CloseResponse {

}

// Request message for rpc `FindNearestGate`.
message FindNearestGateRequest {
    float x = 1;
    float y = 2;
    float z = 3;

    float max_distance = 4;
}
// Response message for rpc `FindNearestGate`.
message FindNearestGateResponse {
    uint32 id = 1;
    float distance = 2;
}

// Request message for rpc `FetchAllGates`.
message FetchAllGatesRequest {
    uint32 chunk_size = 1;
}
// Response message for rpc `FetchAllGates`.
message FetchAllGatesResponse {
    map<uint32, Gate> gates = 1;
}
