syntax = "proto3";

package mruv.spots;

option go_package = "github.com/MruV-RP/mruv-pb-go/spots";

import "google/api/annotations.proto"; //from https://github.com/googleapis/googleapis

// The MruV spots service provides procedures for managing spots.
service MruVSpotsService {
    // Create a spot.
    rpc CreateSpot(CreateSpotRequest) returns (CreateSpotResponse) {
        option (google.api.http) = {
            post: "/v1/spots"
            body: "*"
        };
    }

    // Get a spot.
    rpc GetSpot(GetSpotRequest) returns (GetSpotResponse) {
        option (google.api.http) = {
            get: "/v1/spots/{id}"
        };
    }

    // Update a spot.
    rpc UpdateSpot(UpdateSpotRequest) returns (UpdateSpotResponse) {
        option (google.api.http) = {
            patch: "/v1/spots/{id}"
            body: "*"
        };
    }

    // Delete a spot.
    rpc DeleteSpot(DeleteSpotRequest) returns (DeleteSpotResponse) {
        option (google.api.http) = {
            delete: "/v1/spots/{id}"
        };
    }

    // Fetch all spots.
    rpc FetchAll(FetchAllSpotsRequest) returns (stream FetchAllSpotsResponse) {}
}

//Spot.
message Spot {
    string name = 1;
    string message = 2;
    int32 icon = 3;
    int32 marker = 4;
    float x = 5;
    float y = 6;
    float z = 7;
    int32 vw = 8;
    int32 int = 9;
}


// Request message for rpc `CreateSpot`.
message CreateSpotRequest {
    Spot spot = 1;
}
// Response message for rpc `CreateSpot`.
message CreateSpotResponse {
    uint32 id = 1;
}

// Request message for rpc `GetSpot`.
message GetSpotRequest {
    uint32 id = 1;
}
// Response message for rpc `GetSpot`.
message GetSpotResponse {
    Spot spot = 1;
}

// Request message for rpc `UpdateSpot`.
message UpdateSpotRequest {
    uint32 id = 1;
    Spot spot = 2;
}
// Response message for rpc `UpdateSpot`.
message UpdateSpotResponse {

}

// Request message for rpc `DeleteSpot`.
message DeleteSpotRequest {
    uint32 id = 1;
}
// Response message for rpc `DeleteSpot`.
message DeleteSpotResponse {

}

// Request message for rpc `FetchAllSpots`.
message FetchAllSpotsRequest {
    uint32 chunk_size = 1;
}
// Response message for rpc `FetchAllSpots`.
message FetchAllSpotsResponse {
    map<uint32, Spot> spots = 1;
}
