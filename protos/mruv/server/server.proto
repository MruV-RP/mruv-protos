syntax = "proto3";

package mruv.server;

option go_package = "github.com/MruV-RP/mruv-pb-go/server";

import "google/api/annotations.proto"; //from https://github.com/googleapis/googleapis
import "mruv/server/server_model.proto";

// The MruV server service provides procedures for managing game platform server actions.
service MruVServerService {
    // Register instance of server for further managing.
    rpc RegisterServer(ServerInfo) returns (ServerID) {
        option (google.api.http) = {
            post: "/v1/servers"
            body: "*"
        };
    }

    // Get all registered servers.
    rpc GetRegisteredServers(GetRegisteredServersRequest) returns (GetRegisteredServersResponse) {
        option (google.api.http) = {
            get: "/v1/servers"
        };
    }

    // Get game server status.
    rpc GetServerInfo(ServerID) returns (ServerInfo) {
        option (google.api.http) = {
            get: "/v1/servers/{id}"
        };
    }

    // Update game server status.
    rpc UpdateServerStatus(UpdateServerStatusRequest) returns (UpdateServerStatusResponse) {
        option (google.api.http) = {
            patch: "/v1/servers/{id}/status"
            body: "*"
        };
    }

    // Stream of server events. Events are streamed back in real-time for chosen server.
    //TODO: Change name to: SubscribeServerEvents
    rpc ServerEventsStream(ServerEventsStreamRequest) returns (stream ServerEvent) {}

}

// Request message for `MruVServerService.GetRegisteredServers`.
message GetRegisteredServersRequest {

}

// Response message for `MruVServerService.GetRegisteredServers`.
message GetRegisteredServersResponse {
    repeated ServerInfo servers = 1;
}

// Request message for `MruVServerService.UpdateServerStatus`.
message UpdateServerStatusRequest {
    // Id of the server.
    uint32 id = 1;
    // Status of the server.
    ServerStatus status = 2;
    // How many players are registered on that server.
    uint32 players = 3;
}
// Response message for `MruVServerService.UpdateServerStatus`.
message UpdateServerStatusResponse {

}

// Request message for `MruVServerService.ServerEventsStream`.
message ServerEventsStreamRequest {
    // The ID of the server from which we want to receive events.
    uint32 id = 1;
}

// Server event.
// Response message for `MruVServerService.ServerEventsStream`.
message ServerEvent {
    // Types of server events.
    enum ServerEventType {
        SERVER_EVENT_TYPE_UNSPECIFIED = 0;
        SERVER_EVENT_TYPE_REGISTERED = 1;
        SERVER_EVENT_TYPE_SERVER_DOWN = 2;
        SERVER_EVENT_TYPE_SERVER_UP = 3;
        SERVER_EVENT_TYPE_PLAYERS_CHANGED = 4;
    }

    // Type of a server event.
    ServerEventType type = 1;
}
